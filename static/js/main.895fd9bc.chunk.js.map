{"version":3,"sources":["store/actions.ts","components/TodoList/TodoList.tsx","store/index.ts","api/todos.ts","store/selectors.ts","api/users.ts","components/AddTodoForm/AddTodoForm.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","SelectByType","setTodosAction","payload","type","SET_TODOS","initialState","todos","user","store","createStore","state","action","ADD_TODO","SET_USER","BASE_URL","getTodos","a","fetch","response","json","addTodo","todo","method","body","JSON","stringify","headers","deleteTodo","todoId","getTodosSelector","getUserSelector","getAllUsers","getUser","userId","AddTodoForm","useState","title","setTitle","users","setUsers","selectedUserId","setSelectedUserId","dispatch","useDispatch","useEffect","then","usersFromServer","handleEvent","event","preventDefault","newTodo","completed","onSubmit","className","placeholder","value","onChange","target","disabled","map","id","name","TodoList","currentUserId","query","setQuery","All","selectBy","setSelectBy","useSelector","visibleTodos","filter","toLowerCase","includes","getVisibleTodos","todosFromServer","selectTodos","Active","Completed","deleteTodoClick","updateTodo","onClick","random","sort","Math","classnames","readOnly","checked","CurrentUser","React","memo","deleteUser","selectedUser","email","phone","App","useCallback","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.895fd9bc.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  ADD_TODO = 'ADD_TODO',\n  SET_USER = 'SET_USER',\n}\n\ninterface SetTodos {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\ninterface AddTodo {\n  type: ActionType.ADD_TODO,\n  payload: Todo,\n}\n\ninterface SetUser {\n  type: ActionType.SET_USER,\n  payload: User,\n}\n\nexport type Action = SetTodos | AddTodo | SetUser;\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): Action => ({\n  type: ActionType.ADD_TODO,\n  payload,\n});\n\nexport const setUserAction = (payload: User): Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n","import React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, deleteTodo } from '../../api/todos';\nimport { getTodosSelector, getVisibleTodos } from '../../store/selectors';\nimport { setTodosAction } from '../../store/actions';\n\nimport { AddTodoForm } from '../AddTodoForm';\n\ntype Props = {\n  selectedUserId: (userId: number) => void,\n  currentUserId: number,\n};\n\nenum SelectByType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  selectedUserId,\n  currentUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [selectBy, setSelectBy] = useState<SelectByType>(SelectByType.All);\n\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const visibleTodos = useSelector(getVisibleTodos(query));\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => dispatch(setTodosAction(todosFromServer)));\n  }, []);\n\n  const selectTodos = visibleTodos.filter(todo => {\n    switch (selectBy) {\n      case SelectByType.Active:\n        return !todo.completed;\n\n      case SelectByType.Completed:\n        return todo.completed;\n\n      case SelectByType.All:\n      default:\n        return todo;\n    }\n  });\n\n  const deleteTodoClick = async (todoId: number | undefined) => {\n    await deleteTodo(todoId);\n\n    const updateTodo = await getTodos();\n\n    dispatch(setTodosAction(updateTodo));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <AddTodoForm />\n\n      <input\n        type=\"text\"\n        className=\"TodoList__input\"\n        data-cy=\"filterByTitle\"\n        placeholder=\"Search todo\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n      />\n\n      <select\n        value={selectBy}\n        className=\"TodoList__select\"\n        onChange={(event) => {\n          setSelectBy(event.target.value as SelectByType);\n        }}\n      >\n        <option value=\"all\" disabled>Choose select</option>\n        <option value=\"all\">All Todos</option>\n        <option value=\"active\">Active Todos</option>\n        <option value=\"completed\">Completed Todos</option>\n      </select>\n\n      <button\n        type=\"button\"\n        className=\"\n        TodoList__user-button\n        button\n        TodoList__user-button--selected\n        TodoList__user-button--random\n        \"\n        onClick={() => {\n          const random = [...todos].sort(() => Math.random() - 0.5);\n\n          dispatch(setTodosAction(random));\n        }}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {selectTodos.map(todo => (\n            <li\n              className={classnames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className={classnames('TodoList__user-button', 'button', {\n                    // eslint-disable-next-line max-len\n                    'TodoList__user-button--selected': todo.userId === currentUserId,\n                  })}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  onClick={() => {\n                    selectedUserId(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"TodoList__delete-button button\"\n                  type=\"button\"\n                  onClick={() => {\n                    deleteTodoClick(todo.id);\n                  }}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { Action, ActionType } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action): State => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import { Todo } from '../react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo []> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const addTodo = async (todo: Todo): Promise<Todo> => {\n  const response = await fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    body: JSON.stringify(todo),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n\nexport const deleteTodo = async (todoId: number | undefined) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\nexport const getUserSelector = (state: State) => state.user;\n\nexport const getVisibleTodos = (query: string) => {\n  return (state: State) => {\n    return state.todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n  };\n};\n","import { User } from '../react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getAllUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './AddTodoForm.scss';\n\nimport { useDispatch } from 'react-redux';\nimport { addTodoAction } from '../../store/actions';\nimport { addTodo } from '../../api/todos';\nimport { getAllUsers } from '../../api/users';\n\nimport { Todo, User } from '../../react-app-env';\n\nexport const AddTodoForm: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getAllUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const handleEvent = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newTodo: Todo = {\n      title,\n      userId: selectedUserId,\n      completed: false,\n    };\n\n    const response = await addTodo(newTodo);\n\n    dispatch(addTodoAction(response));\n\n    setTitle('');\n    setSelectedUserId(0);\n  };\n\n  return (\n    <form onSubmit={handleEvent}>\n      <input\n        type=\"text\"\n        className=\"TodoList__input TodoList__input--add\"\n        placeholder=\"Add a new Todo\"\n        value={title}\n        onChange={(event) => {\n          setTitle(event.target.value);\n        }}\n      />\n\n      <select\n        value={selectedUserId}\n        className=\"TodoList__select\"\n        onChange={(event) => {\n          setSelectedUserId(+event.target.value);\n        }}\n      >\n        <option\n          value=\"0\"\n          disabled\n        >\n          Choose a user\n        </option>\n\n        {users.map(user => (\n          <option\n            value={user.id}\n            key={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n\n      <button\n        type=\"submit\"\n        className=\"\n        TodoList__user-button\n        TodoList__user-button--selected\n        TodoList__user-button--random\n        button\n      \"\n      >\n        Add Todo\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserAction } from '../../store/actions';\nimport { getUser } from '../../api/users';\nimport { getUserSelector } from '../../store/selectors';\n\ntype Props = {\n  userId: number;\n  deleteUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = React.memo(({\n  userId,\n  deleteUser,\n}) => {\n  const selectedUser = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getUser(userId)\n      .then(user => dispatch(setUserAction(user)));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${selectedUser?.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n        {selectedUser?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n          CurrentUser__button\n        \"\n        onClick={deleteUser}\n      >\n        Close\n      </button>\n    </div>\n  );\n});\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const deleteUser = useCallback(() => {\n    setSelectedUserId(0);\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectedUserId={setSelectedUserId}\n          currentUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              deleteUser={deleteUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/index';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}